// Heliolus Platform - Prisma Schema
// Complete schema for compliance and risk assessment platform

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum UserRole {
  ADMIN
  USER
  VENDOR
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum CompanySize {
  STARTUP // 1-50
  SMB // 51-500
  MIDMARKET // 501-5000
  ENTERPRISE // 5000+
}

enum AnnualRevenue {
  UNDER_1M     // Under €1M
  FROM_1M_10M  // €1M - €10M
  FROM_10M_100M // €10M - €100M  
  OVER_100M    // Over €100M
}

enum ComplianceTeamSize {
  NONE    // No dedicated compliance team
  ONE_TWO // 1-2 people
  THREE_TEN // 3-10 people
  OVER_TEN  // 10+ people
}

enum Geography {
  US    // United States
  EU    // European Union
  UK    // United Kingdom
  APAC  // Asia-Pacific
  GLOBAL // Global operations
}

enum RiskProfile {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DocumentType {
  POLICY
  ANNUAL_REPORT
  COMPLIANCE_CERT
  AUDIT_REPORT
  OTHER
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum Priority {
  IMMEDIATE // 0-30 days
  SHORT_TERM // 1-3 months
  MEDIUM_TERM // 3-6 months
  LONG_TERM // 6+ months
}

enum CostRange {
  UNDER_10K
  RANGE_10K_50K
  RANGE_50K_100K
  RANGE_100K_250K
  OVER_250K
}

enum EffortRange {
  SMALL
  MEDIUM
  LARGE
}

enum EvidenceTier {
  TIER_0 // Self-declared (×0.6 multiplier)
  TIER_1 // Policy documents (×0.8 multiplier)
  TIER_2 // System-generated (×1.0 multiplier)
}

enum RiskCategory {
  GEOGRAPHIC
  TRANSACTION
  GOVERNANCE
  OPERATIONAL
  REGULATORY
  REPUTATIONAL
}

enum Likelihood {
  RARE
  UNLIKELY
  POSSIBLE
  LIKELY
  CERTAIN
}

enum Impact {
  NEGLIGIBLE
  MINOR
  MODERATE
  MAJOR
  CATASTROPHIC
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TemplateCategory {
  FINANCIAL_CRIME
  TRADE_COMPLIANCE
  DATA_PRIVACY
  CYBERSECURITY
}

enum QuestionType {
  TEXT
  NUMBER
  SELECT
  MULTISELECT
  BOOLEAN
  FILE
  DATE
}

enum VendorCategory {
  KYC_AML
  TRANSACTION_MONITORING
  SANCTIONS_SCREENING
  TRADE_SURVEILLANCE
  RISK_ASSESSMENT
  COMPLIANCE_TRAINING
  REGULATORY_REPORTING
  DATA_GOVERNANCE
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum PricingModel {
  SUBSCRIPTION
  LICENSE
  USAGE
  CUSTOM
}

enum SubscriptionPlan {
  FREE
  PREMIUM // €599/month
  ENTERPRISE // Custom
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum CouponDiscountType {
  PERCENTAGE    // e.g., 20% off
  FIXED_AMOUNT  // e.g., $50 off
}

enum ReportType {
  EXECUTIVE_SUMMARY
  DETAILED
  COMPLIANCE_MATRIX
  GAP_ANALYSIS
  VENDOR_RECOMMENDATIONS
}

enum ReportFormat {
  PDF
  HTML
  JSON
  EXCEL
}

enum ContactType {
  DEMO_REQUEST
  INFO_REQUEST
  RFP
  PRICING
  GENERAL
}

enum ContactStatus {
  PENDING
  ACKNOWLEDGED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum TransactionType {
  PURCHASE
  BONUS
  ASSESSMENT
  REFUND
  ADJUSTMENT
  SUBSCRIPTION_RENEWAL
  ADMIN_GRANT  // Manual credit grant by admin
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum LegalDocumentType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE
}

enum AnswerStatus {
  COMPLETE
  INCOMPLETE
  IN_PROGRESS
}

// ==================== CORE MODELS ====================

model User {
  id                     String     @id @default(cuid())
  email                  String     @unique
  firstName              String
  lastName               String
  password               String
  emailVerified          Boolean    @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  role                   UserRole   @default(USER)
  status                 UserStatus @default(ACTIVE)
  lastLogin              DateTime?
  
  // User preferences and profile fields
  company                String?
  jobTitle               String?
  phone                  String?
  bio                    String?
  timezone               String?
  emailNotifications     Boolean    @default(true)
  pushNotifications      Boolean    @default(true)
  marketingEmails        Boolean    @default(false)
  twoFactorAuth          Boolean    @default(false)
  hasSeenOnboarding      Boolean    @default(false)
  
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  // Relations
  organization      Organization?
  subscription      Subscription?
  assessmentQuota   UserAssessmentQuota?
  assessments       Assessment[]
  auditLogs         AuditLog[]
  vendorContacts    VendorContact[]
  claimedSessions   AnonymousSession[]

  @@index([email])
  @@index([emailVerificationToken])
  @@index([status])
}

model UserAssessmentQuota {
  id          String @id @default(cuid())
  userId      String @unique

  // Freemium tracking
  totalAssessmentsCreated  Int @default(0)

  // Premium tracking
  assessmentsThisMonth     Int @default(0)
  assessmentsUsedThisMonth Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Organization {
  id          String       @id @default(cuid())
  userId      String       @unique
  name        String
  website     String?
  industry    String?
  size        CompanySize?
  country     String
  region      String?
  description String?

  // Business profile fields
  annualRevenue       AnnualRevenue?
  complianceTeamSize  ComplianceTeamSize?
  geography          Geography?

  // Compliance data
  complianceGaps    Json?

  // Metadata
  onboardingCompleted Boolean      @default(false)
  riskProfile         RiskProfile?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents      Document[]
  assessments    Assessment[]
  vendorContacts VendorContact[]

  @@index([userId])
  @@index([name])
  @@index([country])
  @@index([size])
  @@index([annualRevenue])
  @@index([geography])
}

model Document {
  id             String @id @default(cuid())
  organizationId String
  filename       String
  originalName   String
  mimeType       String
  size           Int
  s3Key          String
  s3Bucket       String

  // Document analysis
  documentType  DocumentType?
  parsedContent Json?
  extractedData Json?

  // Evidence tier classification
  evidenceTier              EvidenceTier?
  tierClassificationReason  String?
  tierConfidenceScore       Float?
  classifiedAt              DateTime?

  // Security
  encrypted     Boolean @default(false)
  encryptionKey String?

  // Metadata
  uploadedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([s3Key])
  @@index([documentType])
  @@index([createdAt])
}

// ==================== ASSESSMENT MODELS ====================

model Assessment {
  id             String @id @default(cuid())
  organizationId String
  userId         String
  templateId     String

  // Assessment data
  status     AssessmentStatus @default(DRAFT)
  responses  Json?
  aiAnalysis Json?
  riskScore  Int? // 0-100

  // Results
  recommendations Json?
  strategyMatrix  Json?

  // Credits
  creditsUsed Int @default(0)

  // Metadata
  completedAt DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // AI-Generated Content (one-time generation)
  aiRiskAnalysis   Json?      // Stores key findings and mitigation strategies per category
  aiStrategyMatrix Json?      // Stores the strategy matrix table data
  aiGeneratedAt    DateTime?  // When AI content was generated

  // Relations
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id])
  template           Template             @relation(fields: [templateId], references: [id])
  gaps               Gap[]
  risks              Risk[]
  report             Report?
  creditTransactions CreditTransaction[]
  answers            Answer[]
  priorities         AssessmentPriorities?

  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([completedAt])
}

model Gap {
  id           String @id @default(cuid())
  assessmentId String

  category    String
  title       String
  description String
  severity    Severity
  priority    Priority
  priorityScore Int?         // Numeric priority (1-10 scale) for strategy matrix

  // Remediation
  estimatedCost    CostRange?
  estimatedEffort  EffortRange?
  suggestedVendors String[] // Array of vendorIds

  createdAt DateTime @default(now())

  // Relations
  assessment    Assessment    @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  vendorMatches VendorMatch[]

  @@index([assessmentId])
  @@index([category])
  @@index([severity])
  @@index([priority])
}

model Risk {
  id           String @id @default(cuid())
  assessmentId String

  category    RiskCategory
  title       String
  description String
  likelihood  Likelihood
  impact      Impact
  riskLevel   RiskLevel

  // Mitigation
  mitigationStrategy   String?
  controlEffectiveness Int?       // 0-100: How effective are existing controls at mitigating this risk?
  residualRisk         RiskLevel?

  createdAt DateTime @default(now())

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([category])
  @@index([riskLevel])
}

model Answer {
  id           String @id @default(cuid())
  assessmentId String
  questionId   String

  // Answer data
  score            Int           // Numeric value 0-5
  explanation      String        // AI explanation
  sourceReference  String?       // Document name where answer was found
  status           AnswerStatus  @default(IN_PROGRESS)

  // Weighted scoring fields
  rawQualityScore  Float?        // AI score 0-5 before multiplier
  evidenceTier     EvidenceTier? // Tier of best evidence
  tierMultiplier   Float?        // 0.6, 0.8, or 1.0
  finalScore       Float?        // rawQualityScore × tierMultiplier

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, questionId])
  @@index([assessmentId])
  @@index([questionId])
  @@index([status])
  @@index([score])
}

// ==================== TEMPLATE MODELS ====================

model Template {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String
  category    TemplateCategory

  // Structure
  scoringCriteria Json?
  aiPrompts       Json?

  // Metadata
  version           String   @default("1.0")
  isActive          Boolean  @default(true)
  estimatedMinutes  Int?     // Estimated completion time in minutes
  tags              String[] @default([]) // Template tags for categorization
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Pricing
  creditCost        Int?     @default(50)  // Credits required to complete assessment
  baseCost          Int?     @default(40)  // Base assessment cost
  aiCost            Int?     @default(10)  // AI analysis cost
  allowFreemium     Boolean  @default(true) // Allow free tier access
  minimumPlan       SubscriptionPlan? // Minimum plan required (null = any)

  // Relations
  sections    Section[]
  assessments Assessment[]

  @@index([slug])
  @@index([category])
  @@index([isActive])
  @@index([createdAt])
}

model Section {
  id          String  @id @default(cuid())
  templateId  String
  title       String
  description String?
  weight      Float   @default(1.0) // For scoring
  regulatoryPriority String? // FFIEC, FATF reference
  order       Int
  isRequired  Boolean @default(true) // Whether section is required for assessment completion
  isLibrary   Boolean @default(false) // Whether section is available in reusable library

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  template  Template    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  questions Question[]

  @@index([templateId])
  @@index([order])
  @@index([isLibrary])
}

model Question {
  id         String       @id @default(cuid())
  sectionId  String
  text       String
  type       QuestionType
  required   Boolean      @default(false)
  validation Json?
  helpText   String?
  order      Int

  // AI Assessment fields
  categoryTag   String? // Risk category tag (e.g., "sanctions", "kyc", "transaction-monitoring")
  tags          String[] @default([]) // Multiple tags for categorization and filtering
  weight        Float   @default(1.0) // Importance weight for scoring
  isFoundational Boolean @default(false) // Critical question for compliance
  aiPromptHint  String? // Specific AI prompt guidance for this question
  scoringRules  Json?   // Rules for how to score responses
  isLibrary    Boolean @default(false) // Whether question is available in reusable library

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@index([sectionId])
  @@index([order])
  @@index([type])
  @@index([categoryTag])
  @@index([isLibrary])
}

// ==================== VENDOR MODELS ====================

model Vendor {
  id String @id @default(cuid())

  // Company info
  companyName String @unique
  website     String?
  
  // Fields matching CSV columns exactly
  headquarters           String? // Headquarters
  primaryProduct         String? // Primary Product (singular)
  aiCapabilities        String? // AI Capabilities
  deploymentOptions     String? // Deployment Options
  integrations          String? // Integrations
  dataCoverage          String? // Data Coverage
  awards                String? // Awards / Trust Signals
  customerSegments      String? // Customer Segments
  benefitsSnapshot      String? // Benefits Snapshot
  maturityAssessment    String? // Maturity Assessment
  contactEmail          String? // Contact Email
  logo                  String? // Logo

  // Solutions
  categories VendorCategory[]

  // Matching fields for vendor scoring algorithm
  targetSegments      CompanySize[] @default([]) // Company sizes this vendor targets
  geographicCoverage  String[]      @default([]) // Jurisdictions covered (e.g., ["US", "EU", "GLOBAL"])
  pricingRange        String?                    // Pricing range (e.g., "RANGE_50K_100K")
  features            String[]      @default([]) // Vendor features (e.g., ["Real-time monitoring", "API integration"])
  implementationTimeline Int?                    // Implementation timeline in days

  // Marketplace
  featured    Boolean @default(false)
  verified    Boolean @default(false)
  rating      Float? // 0-5
  reviewCount Int     @default(0)

  // Metadata
  status     VendorStatus @default(PENDING)
  approvedAt DateTime?
  approvedBy String? // adminId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  solutions Solution[]
  matches   VendorMatch[]
  contacts  VendorContact[]

  @@index([companyName])
  @@index([status])
  @@index([featured])
  @@index([verified])
  @@index([categories])
}

model Solution {
  id       String @id @default(cuid())
  vendorId String

  name        String
  description String
  category    VendorCategory

  // Details
  features String[]
  benefits String[]
  useCases String[]

  // Pricing
  pricingModel   PricingModel
  startingPrice  Float?
  currency       String       @default("EUR")
  pricingDetails String?

  // Compatibility
  gapCategories String[] // Which gaps it addresses
  industries    String[]
  companySizes  CompanySize[]

  // Resources
  demoUrl       String?
  brochureUrl   String?
  caseStudyUrls String[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vendor  Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  matches VendorMatch[]

  @@index([vendorId])
  @@index([category])
  @@index([pricingModel])
  @@index([isActive])
  @@index([companySizes])
  @@index([gapCategories])
}

model VendorMatch {
  id         String  @id @default(cuid())
  gapId      String
  vendorId   String
  solutionId String?

  // Matching
  matchScore   Int // 0-100
  matchReasons String[]

  // User interaction
  viewed    Boolean @default(false)
  contacted Boolean @default(false)
  dismissed Boolean @default(false)

  createdAt DateTime @default(now())

  // Relations
  gap      Gap       @relation(fields: [gapId], references: [id], onDelete: Cascade)
  vendor   Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  solution Solution? @relation(fields: [solutionId], references: [id], onDelete: SetNull)

  @@index([gapId])
  @@index([vendorId])
  @@index([matchScore])
  @@index([viewed])
  @@index([contacted])
}

// ==================== BILLING MODELS ====================

model Plan {
  id   String @id @default(cuid())
  slug String @unique // FREE, PREMIUM, ENTERPRISE or custom

  // Plan details
  name        String // e.g., "Premium Plan"
  description String?
  isActive    Boolean @default(true)
  isPublic    Boolean @default(true) // Show on pricing page

  // Pricing
  monthlyPrice     Decimal @default(0) // Price in dollars/euros for monthly billing
  annualPrice      Decimal @default(0) // Price in dollars/euros for annual billing
  currency         String  @default("USD") // EUR, USD, etc.

  // Stripe Integration
  stripeProductId       String? @unique // prod_xxx
  stripeMonthlyPriceId  String? @unique // price_xxx for monthly
  stripeAnnualPriceId   String? @unique // price_xxx for annual

  // Credits and Limits
  monthlyCredits     Int @default(0) // Credits allocated per month
  assessmentCredits  Int @default(0) // Credits per assessment
  maxAssessments     Int @default(0) // Max assessments per month (0 = unlimited)
  maxUsers           Int @default(1) // Max team members

  // Features
  features Json? // Array of feature strings or feature flags

  // Trial
  trialDays Int @default(0) // Number of trial days

  // Metadata
  displayOrder Int      @default(0) // Order on pricing page
  metadata     Json?    // Additional metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([slug])
  @@index([isActive])
  @@index([isPublic])
  @@index([displayOrder])
}

model Coupon {
  id   String @id @default(cuid())
  code String @unique // Coupon code (e.g., "SAVE20")

  // Stripe Integration
  stripeCouponId String? @unique // Stripe coupon ID

  // Discount details
  discountType       CouponDiscountType // PERCENTAGE or FIXED_AMOUNT
  discountValue      Decimal // 20 for 20% or 50 for $50 off
  currency           String?             @default("USD") // For FIXED_AMOUNT coupons

  // Validity
  isActive           Boolean  @default(true)
  maxRedemptions     Int?     // Max times this can be used (null = unlimited)
  timesRedeemed      Int      @default(0)
  validFrom          DateTime @default(now())
  validUntil         DateTime? // Expiry date (null = no expiry)

  // Restrictions
  applicablePlans    String[] // Array of plan slugs (empty = all plans)
  minimumAmount      Decimal? // Minimum purchase amount
  newCustomersOnly   Boolean  @default(false)

  // Duration (for subscriptions)
  durationInMonths   Int? // How many months the discount applies (null = forever)

  // Metadata
  name               String? // Internal name
  description        String?
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@index([validFrom])
  @@index([validUntil])
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique

  // Plan details
  plan   SubscriptionPlan   @default(FREE)
  status SubscriptionStatus @default(ACTIVE)

  // Stripe
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  stripePaymentMethodId String?

  // Credits
  creditsBalance   Int @default(0)
  creditsUsed      Int @default(0)
  creditsPurchased Int @default(0)

  // Billing
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAt           DateTime?
  canceledAt         DateTime?
  billingCycle       BillingCycle? // MONTHLY or ANNUAL
  billingEmail       String?       // Billing contact email
  renewalDate        DateTime?     // Next renewal date
  stripePriceId      String?       // Links to Stripe price object (price_xxx)

  // Trial
  trialEnd DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices           Invoice[]
  creditTransactions CreditTransaction[]

  @@index([userId])
  @@index([status])
  @@index([stripeCustomerId])
  @@index([plan])
  @@index([currentPeriodEnd])
}

model Invoice {
  id             String @id @default(cuid())
  subscriptionId String

  // Stripe
  stripeInvoiceId String  @unique
  stripeChargeId  String?

  // Invoice details
  number   String        @unique
  amount   Float
  currency String        @default("EUR")
  status   InvoiceStatus @default(DRAFT)

  // Dates
  periodStart DateTime
  periodEnd   DateTime
  dueDate     DateTime
  paidAt      DateTime?

  // Files
  pdfUrl String?

  createdAt DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([stripeInvoiceId])
  @@index([status])
  @@index([dueDate])
  @@index([paidAt])
}

model CreditTransaction {
  id             String @id @default(cuid())
  subscriptionId String

  type    TransactionType
  amount  Int // Positive for credit, negative for debit
  balance Int // After transaction

  // Context
  description  String
  metadata     Json?
  assessmentId String?

  createdAt DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  assessment   Assessment?  @relation(fields: [assessmentId], references: [id], onDelete: SetNull)

  @@index([subscriptionId])
  @@index([type])
  @@index([assessmentId])
  @@index([createdAt])
}

// ==================== REPORTING MODELS ====================

model Report {
  id           String @id @default(cuid())
  assessmentId String @unique

  // Report data
  type    ReportType
  format  ReportFormat
  content Json // Full report data
  summary String?

  // Access control
  isPublic      Boolean @default(false)
  accessToken   String? // For sharing
  viewCount     Int     @default(0)
  downloadCount Int     @default(0)

  // Files
  pdfUrl String?
  s3Key  String?

  createdAt DateTime  @default(now())
  expiresAt DateTime?

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([type])
  @@index([isPublic])
  @@index([accessToken])
  @@index([createdAt])
}

model VendorContact {
  id             String @id @default(cuid())
  vendorId       String
  userId         String
  organizationId String

  // Contact details
  type         ContactType
  message      String?
  requirements Json?
  budget       String?
  timeline     String?

  // Status
  status         ContactStatus @default(PENDING)
  vendorResponse String?
  respondedAt    DateTime?

  createdAt DateTime @default(now())

  // Relations
  vendor       Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([userId])
  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model AuditLog {
  id     String  @id @default(cuid())
  userId String?

  // Action details
  action   String
  entity   String
  entityId String?

  // Change tracking
  oldValues Json?
  newValues Json?

  // Context
  ipAddress String?
  userAgent String?
  metadata  Json?

  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
}

// ==================== ANONYMOUS SESSION MODELS ====================

enum AnonymousSessionStatus {
  ACTIVE
  EXPIRED
  CLAIMED
}

model AnonymousSession {
  id           String                @id @default(cuid())
  sessionToken String                @unique
  
  // Session tracking
  status     AnonymousSessionStatus @default(ACTIVE)
  lastSeenAt DateTime              @default(now())
  expiresAt  DateTime
  
  // Context
  ipAddress String?
  userAgent String?
  state     Json?   // Store additional session state
  
  // Claim tracking
  claimedByUserId String?
  claimedAt       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  claimedByUser     User?                @relation(fields: [claimedByUserId], references: [id], onDelete: SetNull)
  organizationDraft OrganizationDraft?
  assessmentDrafts  AssessmentDraft[]
  documentDrafts    DocumentDraft[]
  
  @@index([sessionToken])
  @@index([status])
  @@index([expiresAt])
  @@index([claimedByUserId])
  @@index([createdAt])
}

model OrganizationDraft {
  id        String @id @default(cuid())
  sessionId String @unique
  
  // Company details (draft version of Organization fields)
  name        String?
  website     String?
  industry    String?
  size        CompanySize?
  country     String?
  region      String?
  description String?
  
  // Financial & team details
  annualRevenue       AnnualRevenue?
  complianceTeamSize  ComplianceTeamSize?
  geography          Geography?
  
  // Risk & compliance
  riskProfile      RiskProfile?
  complianceGaps   String[]   @default([])
  
  // Additional fields for risk profile
  financialCrimeRisk    String?
  riskAppetite         String?
  complianceBudget     String?
  regulatoryRequirements String?
  painPoints           String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  session AnonymousSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([createdAt])
}

model AssessmentDraft {
  id        String @id @default(cuid())
  sessionId String
  
  // Assessment details
  templateId String?
  title      String?
  answers    Json?   @default("{}")
  metadata   Json?
  status     AssessmentStatus @default(DRAFT)
  
  // Analysis results (stored as draft until claimed)
  analysisResults Json?
  reportGenerated Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  session AnonymousSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([templateId])
  @@index([status])
  @@index([createdAt])
}

model DocumentDraft {
  id        String @id @default(cuid())
  sessionId String
  
  // File details
  filename     String
  originalName String
  mimeType     String
  size         BigInt
  
  // Storage details (using anon/{sessionId}/ prefix)
  objectKey        String  @unique
  bucket           String?
  documentType     DocumentType?
  uploadConfirmed  Boolean @default(false)

  // Content analysis (draft)
  parsedContent Json?
  extractedData Json?
  
  // Security
  encrypted     Boolean @default(false)
  encryptionKey String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  session AnonymousSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([objectKey])
  @@index([documentType])
  @@index([createdAt])
}

// ==================== ASSESSMENT PRIORITIES MODEL ====================

model AssessmentPriorities {
  id           String @id @default(cuid())
  assessmentId String @unique

  // Step 1: Organizational Context
  companySize        CompanySize
  annualRevenue      AnnualRevenue
  complianceTeamSize ComplianceTeamSize
  jurisdictions      String[]
  existingSystems    String[]

  // Step 2: Goals & Timeline
  primaryGoal            String
  implementationUrgency  String

  // Step 3: Use Case Prioritization
  selectedUseCases String[]
  rankedPriorities String[]

  // Step 4: Solution Requirements
  budgetRange          String
  deploymentPreference String
  mustHaveFeatures     String[]
  criticalIntegrations String[]

  // Step 5: Vendor Preferences
  vendorMaturity         String
  geographicRequirements String
  supportModel           String

  // Step 6: Decision Factors
  decisionFactorRanking String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
}

// ==================== LEGAL DOCUMENTS MODEL ====================

model LegalDocument {
  id   String            @id @default(cuid())
  type LegalDocumentType

  // File details
  filename String
  s3Key    String
  s3Bucket String
  fileSize Int
  mimeType String @default("application/pdf")

  // Version control
  version  String  @default("1.0")
  isActive Boolean @default(true)

  // Metadata
  uploadedBy String // Admin user ID
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([createdAt])
}
