version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: heliolus-postgres
    environment:
      POSTGRES_DB: heliumdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - heliolus-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: heliolus-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - heliolus-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-server --appendonly yes

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: heliolus-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@heliolus.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '5050:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - heliolus-network
    depends_on:
      postgres:
        condition: service_healthy

  # LocalStack for AWS S3 mocking (development only)
  localstack:
    image: localstack/localstack:latest
    container_name: heliolus-localstack
    environment:
      SERVICES: s3
      DEBUG: 1
      DATA_DIR: /tmp/localstack/data
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    ports:
      - '4566:4566'
      - '4571:4571'
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/localstack/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
    networks:
      - heliolus-network

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: heliolus-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - '8081:8081'
    networks:
      - heliolus-network
    depends_on:
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  localstack_data:

networks:
  heliolus-network:
    driver: bridge
