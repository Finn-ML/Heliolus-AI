import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  AlertTriangle,
  TrendingUp,
  Shield,
  ArrowRight,
  Target,
  CheckCircle,
  Download,
} from 'lucide-react';

interface RiskDashboardProps {
  report: any;
  profile: any;
  onNavigateToMarketplace: () => void;
}

const RiskDashboard: React.FC<RiskDashboardProps> = ({
  report,
  profile,
  onNavigateToMarketplace,
}) => {
  if (
    !report ||
    !profile ||
    !report.riskAreas ||
    !report.recommendedActions ||
    !Array.isArray(report.riskAreas) ||
    !Array.isArray(report.recommendedActions)
  ) {
    return (
      <Card className="max-w-4xl mx-auto">
        <CardContent className="p-12 text-center">
          <Shield className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-white mb-2">Complete Required Steps</h3>
          <p className="text-white">
            Please complete your business profile and upload a risk assessment report to view the
            analysis dashboard.
          </p>
        </CardContent>
      </Card>
    );
  }

  const getRiskColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'high':
        return 'destructive';
      case 'medium':
        return 'default';
      case 'low':
        return 'secondary';
      default:
        return 'default';
    }
  };

  const getRiskScore = (score: number) => {
    if (score >= 7) return { color: 'text-red-400', bg: 'bg-red-600/20' };
    if (score >= 4) return { color: 'text-yellow-400', bg: 'bg-yellow-600/20' };
    return { color: 'text-green-400', bg: 'bg-green-600/20' };
  };

  const downloadReport = () => {
    const reportData = {
      companyName: profile.companyName || 'Company',
      analysisDate: new Date().toLocaleDateString(),
      overallRiskScore: report.overallRiskScore,
      riskAreas: report.riskAreas,
      recommendedActions: report.recommendedActions,
      maturityLevel: profile.maturityAssessment?.level,
    };

    const reportContent = `
Risk Analysis Report
Generated: ${reportData.analysisDate}
Company: ${reportData.companyName}
Maturity Level: ${reportData.maturityLevel}

EXECUTIVE SUMMARY
Overall Risk Score: ${reportData.overallRiskScore.toFixed(1)}/10
High Risk Areas: ${report.riskAreas.filter((area: any) => area.riskLevel === 'High').length}
Total Priority Actions: ${report.recommendedActions.length}

DETAILED RISK ANALYSIS
${reportData.riskAreas
  .map(
    (area: any, idx: number) => `
${idx + 1}. ${area.category} (Risk Level: ${area.riskLevel})
   Score: ${area.score.toFixed(1)}/10
   Key Findings:
   ${area.findings.map((finding: string) => `   • ${finding}`).join('\n')}
   
   Mitigation Strategies:
   ${area.mitigationStrategies.map((strategy: string) => `   • ${strategy}`).join('\n')}
`
  )
  .join('\n')}

PRIORITY ACTIONS
${reportData.recommendedActions.map((action: string, idx: number) => `${idx + 1}. ${action}`).join('\n')}

This report was generated by the Risk Assessment Analysis system.
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Risk_Analysis_Report_${reportData.companyName}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header with Download */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-3xl font-bold text-white">Risk Analysis Dashboard</h2>
          <p className="text-white mt-2">
            Comprehensive risk assessment and mitigation recommendations
          </p>
        </div>
        <Button onClick={downloadReport} className="flex items-center space-x-2">
          <Download className="h-4 w-4" />
          <span>Download Report</span>
        </Button>
      </div>

      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-gray-800/50 border-gray-700">
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Shield className="h-8 w-8 text-cyan-400" />
              <div>
                <div className="text-2xl font-bold text-white">
                  {report.overallRiskScore.toFixed(1)}
                </div>
                <div className="text-sm text-cyan-400">Overall Risk Score</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-8 w-8 text-red-400" />
              <div>
                <div className="text-2xl font-bold text-white">
                  {report.riskAreas.filter((area: any) => area.riskLevel === 'High').length}
                </div>
                <div className="text-sm text-red-400">High Risk Areas</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Target className="h-8 w-8 text-pink-400" />
              <div>
                <div className="text-2xl font-bold text-white">
                  {report.recommendedActions.length}
                </div>
                <div className="text-sm text-pink-400">Priority Actions</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <TrendingUp className="h-8 w-8 text-green-400" />
              <div>
                <div className="text-sm font-medium text-white">
                  {profile.maturityAssessment?.level.split(' ')[0]}
                </div>
                <div className="text-sm text-green-400">Maturity Level</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Risk Areas Analysis */}
      <Card>
        <CardHeader>
          <CardTitle>Risk Areas Analysis</CardTitle>
          <CardDescription>
            Detailed breakdown of identified risk areas with scores and mitigation strategies
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {report.riskAreas.map((area: any, index: number) => {
              const scoreStyle = getRiskScore(area.score);
              return (
                <div key={index} className="border rounded-lg p-6 space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <h3 className="text-lg font-semibold text-white">{area.category}</h3>
                      <Badge variant={getRiskColor(area.riskLevel)}>{area.riskLevel} Risk</Badge>
                    </div>
                    <div className={`px-3 py-1 rounded-full ${scoreStyle.bg}`}>
                      <span className={`font-bold ${scoreStyle.color}`}>
                        {area.score.toFixed(1)}/10
                      </span>
                    </div>
                  </div>

                  <Progress value={area.score * 10} className="h-2" />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-white mb-2">Key Findings</h4>
                      <ul className="space-y-1">
                        {area.findings.map((finding: string, idx: number) => (
                          <li key={idx} className="text-sm text-white flex items-start space-x-2">
                            <AlertTriangle className="h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                            <span>{finding}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div>
                      <h4 className="font-medium text-white mb-2">Mitigation Strategies</h4>
                      <ul className="space-y-1">
                        {area.mitigationStrategies.map((strategy: string, idx: number) => (
                          <li key={idx} className="text-sm text-white flex items-start space-x-2">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                            <span>{strategy}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Priority Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Priority Actions</CardTitle>
          <CardDescription>
            Recommended immediate actions based on your risk assessment and business profile
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {report.recommendedActions.map((action: string, index: number) => (
              <div
                key={index}
                className="flex items-center space-x-3 p-3 bg-gray-800/50 rounded-lg"
              >
                <div className="flex items-center justify-center w-6 h-6 bg-cyan-600 text-white rounded-full text-sm font-bold">
                  {index + 1}
                </div>
                <span className="text-white">{action}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Next Steps */}
      <Card className="bg-gray-800/50 border-gray-700">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-white mb-2">
                Ready to Create Your Strategy?
              </h3>
              <p className="text-white">
                Generate a comprehensive mitigation strategy matrix with prioritized recommendations
                and implementation roadmap.
              </p>
            </div>
            <Button
              onClick={onNavigateToMarketplace}
              size="lg"
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              Create Strategy Matrix
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default RiskDashboard;
